generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                   @id @default(cuid())
  name                   String 
  email                  String                   @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  role                   String                   @default("Client")
  accounts               Account[]
  offers                 Offer[]
  sessions               Session[]
  sentMessages           Message[]                @relation("SenderMessages")
  receivedMessages       Message[]                @relation("ReceiverMessages")
  conversationParticipants ConversationParticipant[]
  contracts              Contract[]               @relation("ClientContracts")
  steps          ContractStep[]           @relation("ProviderSteps")
  serviceContracts       ServiceContract[]
  userProfile            UserProfile?
  reviews                Review[]                 @relation("UserReviews")
  company                String?
  jobTitle               String?
  bio                    String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Offer {
  id            String         @id @default(cuid())
  title         String
  description   String
  price         Float
  category      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String?
  image         String?
  author        User?          @relation(fields: [authorId], references: [id])
  conversations Conversation[]
  steps ContractStep[]
  reviews       Review[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // Note sur 5 étoiles (1-5)
  comment   String?  // Commentaire optionnel
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   // Utilisateur qui laisse l'avis
  offerId   String   // Offre concernée
  user      User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  offer     Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@unique([userId, offerId]) // Un utilisateur ne peut laisser qu'un seul avis par offre
}

model ContractStep {
  id          String   @id @default(cuid())
  contractId  String
  offerId     String?
  name        String
  description String
  price       Float
  duration    String
  isRealOffer Boolean @default(false)
  providerId  String?
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contract    Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  offer       Offer?   @relation(fields: [offerId], references: [id], onDelete: SetNull)
  provider    User?    @relation("ProviderSteps", fields: [providerId], references: [id], onDelete: SetNull)

  @@index([contractId])
}

model Contract {
  id                String         @id @default(cuid())
  title             String
  description       String
  totalPrice        Float
  estimatedDuration String
  status            String         @default("PENDING")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  clientId          String
  servicePathId     String
  client            User           @relation("ClientContracts", fields: [clientId], references: [id], onDelete: Cascade)
  steps     ContractStep[]

  @@index([clientId])
}

model Conversation {
  id           String                   @id @default(cuid())
  title        String?
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  offerId      String?
  offer        Offer?                   @relation(fields: [offerId], references: [id])
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now())
  senderId       String
  receiverId     String?
  conversationId String
  isRead         Boolean      @default(false)
  sender         User         @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User?        @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: SetNull)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model ServiceContract {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  services      Json     // Stores multiple service paths with detailed service information
  totalPrice    Float
  status        String   @default("DRAFT")
  contractNumber String  @unique
  userEmail     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  needsDescription  String?
  analysisResult    Json?    // Stores the AI analysis result
  contractDetails   Json?    // Stores contract details
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}